[2022-07-05 10:47:10,669 INFO train.py line 131 48403] arch: pointtransformer_seg_repro
base_lr: 0.5
batch_size: 4
batch_size_test: 4
batch_size_val: 4
classes: 13
data_name: s3dis
data_root: dataset/s3dis/trainval_fullarea
dist_backend: nccl
dist_url: tcp://localhost:8888
distributed: False
drop_rate: 0.5
epochs: 100
eval_freq: 1
evaluate: True
fea_dim: 6
ignore_label: 255
loop: 30
manual_seed: 7777
model_path: None
momentum: 0.9
multiplier: 0.1
multiprocessing_distributed: False
names_path: data/s3dis/s3dis_names.txt
ngpus_per_node: 1
print_freq: 1
rank: 0
resume: None
save_folder: None
save_freq: 1
save_path: exp/s3dis/pointtransformer_repro
split: val
start_epoch: 0
step_epoch: 30
sync_bn: False
test_area: 5
test_gpu: [0]
test_list: dataset/s3dis/list/val5.txt
test_list_full: dataset/s3dis/list/val5_full.txt
test_workers: 4
train_gpu: [0]
use_xyz: True
voxel_max: 80000
voxel_size: 0.04
weight: None
weight_decay: 0.0001
workers: 16
world_size: 1
[2022-07-05 10:47:10,670 INFO train.py line 132 48403] => creating model ...
[2022-07-05 10:47:10,670 INFO train.py line 133 48403] Classes: 13
[2022-07-05 10:47:10,670 INFO train.py line 134 48403] PointTransformerSeg(
  (enc1): Sequential(
    (0): TransitionDown(
      (linear): Linear(in_features=6, out_features=32, bias=False)
      (bn): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=32, out_features=32, bias=False)
      (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=32, out_features=32, bias=True)
        (linear_k): Linear(in_features=32, out_features=32, bias=True)
        (linear_v): Linear(in_features=32, out_features=32, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=32, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=32, out_features=4, bias=True)
          (3): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=4, out_features=4, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=32, out_features=32, bias=False)
      (bn3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (enc2): Sequential(
    (0): TransitionDown(
      (linear): Linear(in_features=35, out_features=64, bias=False)
      (pool): MaxPool1d(kernel_size=16, stride=16, padding=0, dilation=1, ceil_mode=False)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=64, out_features=64, bias=False)
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=64, out_features=64, bias=True)
        (linear_k): Linear(in_features=64, out_features=64, bias=True)
        (linear_v): Linear(in_features=64, out_features=64, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=64, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=64, out_features=8, bias=True)
          (3): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=8, out_features=8, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=64, out_features=64, bias=False)
      (bn3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): PointTransformerBlock(
      (linear1): Linear(in_features=64, out_features=64, bias=False)
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=64, out_features=64, bias=True)
        (linear_k): Linear(in_features=64, out_features=64, bias=True)
        (linear_v): Linear(in_features=64, out_features=64, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=64, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=64, out_features=8, bias=True)
          (3): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=8, out_features=8, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=64, out_features=64, bias=False)
      (bn3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (enc3): Sequential(
    (0): TransitionDown(
      (linear): Linear(in_features=67, out_features=128, bias=False)
      (pool): MaxPool1d(kernel_size=16, stride=16, padding=0, dilation=1, ceil_mode=False)
      (bn): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=128, out_features=128, bias=False)
      (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=128, out_features=128, bias=True)
        (linear_k): Linear(in_features=128, out_features=128, bias=True)
        (linear_v): Linear(in_features=128, out_features=128, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=128, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=128, out_features=16, bias=True)
          (3): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=16, out_features=16, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=128, out_features=128, bias=False)
      (bn3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): PointTransformerBlock(
      (linear1): Linear(in_features=128, out_features=128, bias=False)
      (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=128, out_features=128, bias=True)
        (linear_k): Linear(in_features=128, out_features=128, bias=True)
        (linear_v): Linear(in_features=128, out_features=128, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=128, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=128, out_features=16, bias=True)
          (3): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=16, out_features=16, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=128, out_features=128, bias=False)
      (bn3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): PointTransformerBlock(
      (linear1): Linear(in_features=128, out_features=128, bias=False)
      (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=128, out_features=128, bias=True)
        (linear_k): Linear(in_features=128, out_features=128, bias=True)
        (linear_v): Linear(in_features=128, out_features=128, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=128, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=128, out_features=16, bias=True)
          (3): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=16, out_features=16, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=128, out_features=128, bias=False)
      (bn3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (enc4): Sequential(
    (0): TransitionDown(
      (linear): Linear(in_features=131, out_features=256, bias=False)
      (pool): MaxPool1d(kernel_size=16, stride=16, padding=0, dilation=1, ceil_mode=False)
      (bn): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (enc5): Sequential(
    (0): TransitionDown(
      (linear): Linear(in_features=259, out_features=512, bias=False)
      (pool): MaxPool1d(kernel_size=16, stride=16, padding=0, dilation=1, ceil_mode=False)
      (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=512, out_features=512, bias=False)
      (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=512, out_features=512, bias=True)
        (linear_k): Linear(in_features=512, out_features=512, bias=True)
        (linear_v): Linear(in_features=512, out_features=512, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=512, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=512, out_features=64, bias=True)
          (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=64, out_features=64, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=512, out_features=512, bias=False)
      (bn3): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): PointTransformerBlock(
      (linear1): Linear(in_features=512, out_features=512, bias=False)
      (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=512, out_features=512, bias=True)
        (linear_k): Linear(in_features=512, out_features=512, bias=True)
        (linear_v): Linear(in_features=512, out_features=512, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=512, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=512, out_features=64, bias=True)
          (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=64, out_features=64, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=512, out_features=512, bias=False)
      (bn3): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (dec5): Sequential(
    (0): TransitionUp(
      (linear1): Sequential(
        (0): Linear(in_features=1024, out_features=512, bias=True)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (linear2): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU(inplace=True)
      )
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=512, out_features=512, bias=False)
      (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=512, out_features=512, bias=True)
        (linear_k): Linear(in_features=512, out_features=512, bias=True)
        (linear_v): Linear(in_features=512, out_features=512, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=512, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=512, out_features=64, bias=True)
          (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=64, out_features=64, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=512, out_features=512, bias=False)
      (bn3): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (dec4): Sequential(
    (0): TransitionUp(
      (linear1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (linear2): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=True)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=256, out_features=256, bias=False)
      (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=256, out_features=256, bias=True)
        (linear_k): Linear(in_features=256, out_features=256, bias=True)
        (linear_v): Linear(in_features=256, out_features=256, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=256, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=32, bias=True)
          (3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=32, out_features=32, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=256, out_features=256, bias=False)
      (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (dec3): Sequential(
    (0): TransitionUp(
      (linear1): Sequential(
        (0): Linear(in_features=128, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (linear2): Sequential(
        (0): Linear(in_features=256, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=128, out_features=128, bias=False)
      (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=128, out_features=128, bias=True)
        (linear_k): Linear(in_features=128, out_features=128, bias=True)
        (linear_v): Linear(in_features=128, out_features=128, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=128, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=128, out_features=16, bias=True)
          (3): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=16, out_features=16, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=128, out_features=128, bias=False)
      (bn3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (dec2): Sequential(
    (0): TransitionUp(
      (linear1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (linear2): Sequential(
        (0): Linear(in_features=128, out_features=64, bias=True)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=64, out_features=64, bias=False)
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=64, out_features=64, bias=True)
        (linear_k): Linear(in_features=64, out_features=64, bias=True)
        (linear_v): Linear(in_features=64, out_features=64, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=64, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=64, out_features=8, bias=True)
          (3): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=8, out_features=8, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=64, out_features=64, bias=False)
      (bn3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (dec1): Sequential(
    (0): TransitionUp(
      (linear1): Sequential(
        (0): Linear(in_features=32, out_features=32, bias=True)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (linear2): Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): PointTransformerBlock(
      (linear1): Linear(in_features=32, out_features=32, bias=False)
      (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (transformer2): PointTransformerLayer(
        (linear_q): Linear(in_features=32, out_features=32, bias=True)
        (linear_k): Linear(in_features=32, out_features=32, bias=True)
        (linear_v): Linear(in_features=32, out_features=32, bias=True)
        (linear_p): Sequential(
          (0): Linear(in_features=3, out_features=3, bias=True)
          (1): BatchNorm1d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=3, out_features=32, bias=True)
        )
        (linear_w): Sequential(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=32, out_features=4, bias=True)
          (3): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=4, out_features=4, bias=True)
        )
        (softmax): Softmax(dim=1)
      )
      (bn2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (linear3): Linear(in_features=32, out_features=32, bias=False)
      (bn3): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (cls): Sequential(
    (0): Linear(in_features=32, out_features=32, bias=True)
    (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Linear(in_features=32, out_features=13, bias=True)
  )
)
[2022-07-05 10:47:12,683 INFO train.py line 180 48403] train_data samples: '6120'
Totally 204 samples in train set.
Totally 68 samples in val set.
Totally 204 samples in train set.
Totally 68 samples in val set.
/data/workspace/anaconda3/lib/python3.9/site-packages/torch/nn/functional.py:652: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /opt/conda/conda-bld/pytorch_1623448255797/work/c10/core/TensorImpl.h:1156.)
  return torch.max_pool1d(input, kernel_size, stride, padding, dilation, ceil_mode)
[2022-07-05 10:47:18,038 INFO train.py line 299 48403] Epoch: [1/100][1/1530] Data 3.196 (3.196) Batch 5.353 (5.353) Remain 227:30:15 Loss 2.6927 Accuracy 0.0526.
[2022-07-05 10:47:24,275 INFO train.py line 299 48403] Epoch: [1/100][2/1530] Data 5.129 (4.163) Batch 6.237 (5.795) Remain 246:17:42 Loss 2.3915 Accuracy 0.2081.
[2022-07-05 10:47:24,941 INFO train.py line 299 48403] Epoch: [1/100][3/1530] Data 0.001 (2.775) Batch 0.665 (4.085) Remain 173:37:03 Loss 2.1239 Accuracy 0.3582.
x after transformer 2 : torch.Size([110327, 32])
p x o at the end of transformer block: torch.Size([110327, 3]) torch.Size([110327, 32]) torch.Size([4])
x after transformer 2 : torch.Size([27580, 64])
p x o at the end of transformer block: torch.Size([27580, 3]) torch.Size([27580, 64]) torch.Size([4])
x after transformer 2 : torch.Size([27580, 64])
p x o at the end of transformer block: torch.Size([27580, 3]) torch.Size([27580, 64]) torch.Size([4])
x after transformer 2 : torch.Size([6894, 128])
p x o at the end of transformer block: torch.Size([6894, 3]) torch.Size([6894, 128]) torch.Size([4])
x after transformer 2 : torch.Size([6894, 128])
p x o at the end of transformer block: torch.Size([6894, 3]) torch.Size([6894, 128]) torch.Size([4])
x after transformer 2 : torch.Size([6894, 128])
p x o at the end of transformer block: torch.Size([6894, 3]) torch.Size([6894, 128]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([428, 512])
p x o at the end of transformer block: torch.Size([428, 3]) torch.Size([428, 512]) torch.Size([4])
x after transformer 2 : torch.Size([428, 512])
p x o at the end of transformer block: torch.Size([428, 3]) torch.Size([428, 512]) torch.Size([4])
x after transformer 2 : torch.Size([428, 512])
p x o at the end of transformer block: torch.Size([428, 3]) torch.Size([428, 512]) torch.Size([4])
x after transformer 2 : torch.Size([1721, 256])
p x o at the end of transformer block: torch.Size([1721, 3]) torch.Size([1721, 256]) torch.Size([4])
x after transformer 2 : torch.Size([6894, 128])
p x o at the end of transformer block: torch.Size([6894, 3]) torch.Size([6894, 128]) torch.Size([4])
x after transformer 2 : torch.Size([27580, 64])
p x o at the end of transformer block: torch.Size([27580, 3]) torch.Size([27580, 64]) torch.Size([4])
x after transformer 2 : torch.Size([110327, 32])
p x o at the end of transformer block: torch.Size([110327, 3]) torch.Size([110327, 32]) torch.Size([4])
x after transformer 2 : torch.Size([184538, 32])
p x o at the end of transformer block: torch.Size([184538, 3]) torch.Size([184538, 32]) torch.Size([4])
x after transformer 2 : torch.Size([46134, 64])
p x o at the end of transformer block: torch.Size([46134, 3]) torch.Size([46134, 64]) torch.Size([4])
x after transformer 2 : torch.Size([46134, 64])
p x o at the end of transformer block: torch.Size([46134, 3]) torch.Size([46134, 64]) torch.Size([4])
x after transformer 2 : torch.Size([11533, 128])
p x o at the end of transformer block: torch.Size([11533, 3]) torch.Size([11533, 128]) torch.Size([4])
x after transformer 2 : torch.Size([11533, 128])
p x o at the end of transformer block: torch.Size([11533, 3]) torch.Size([11533, 128]) torch.Size([4])
x after transformer 2 : torch.Size([11533, 128])
p x o at the end of transformer block: torch.Size([11533, 3]) torch.Size([11533, 128]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([719, 512])
p x o at the end of transformer block: torch.Size([719, 3]) torch.Size([719, 512]) torch.Size([4])
x after transformer 2 : torch.Size([719, 512])
p x o at the end of transformer block: torch.Size([719, 3]) torch.Size([719, 512]) torch.Size([4])
x after transformer 2 : torch.Size([719, 512])
p x o at the end of transformer block: torch.Size([719, 3]) torch.Size([719, 512]) torch.Size([4])
x after transformer 2 : torch.Size([2882, 256])
p x o at the end of transformer block: torch.Size([2882, 3]) torch.Size([2882, 256]) torch.Size([4])
x after transformer 2 : torch.Size([11533, 128])
p x o at the end of transformer block: torch.Size([11533, 3]) torch.Size([11533, 128]) torch.Size([4])
x after transformer 2 : torch.Size([46134, 64])
p x o at the end of transformer block: torch.Size([46134, 3]) torch.Size([46134, 64]) torch.Size([4])
x after transformer 2 : torch.Size([184538, 32])
p x o at the end of transformer block: torch.Size([184538, 3]) torch.Size([184538, 32]) torch.Size([4])
x after transformer 2 : torch.Size([157141, 32])
p x o at the end of transformer block: torch.Size([157141, 3]) torch.Size([157141, 32]) torch.Size([4])
x after transformer 2 : torch.Size([39283, 64])
p x o at the end of transformer block: torch.Size([39283, 3]) torch.Size([39283, 64]) torch.Size([4])
x after transformer 2 : torch.Size([39283, 64])
p x o at the end of transformer block: torch.Size([39283, 3]) torch.Size([39283, 64]) torch.Size([4])
x after transformer 2 : torch.Size([9819, 128])
p x o at the end of transformer block: torch.Size([9819, 3]) torch.Size([9819, 128]) torch.Size([4])
x after transformer 2 : torch.Size([9819, 128])
p x o at the end of transformer block: torch.Size([9819, 3]) torch.Size([9819, 128]) torch.Size([4])
x after transformer 2 : torch.Size([9819, 128])
p x o at the end of transformer block: torch.Size([9819, 3]) torch.Size([9819, 128]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([613, 512])
p x o at the end of transformer block: torch.Size([613, 3]) torch.Size([613, 512]) torch.Size([4])
x after transformer 2 : torch.Size([613, 512])
p x o at the end of transformer block: torch.Size([613, 3]) torch.Size([613, 512]) torch.Size([4])
x after transformer 2 : torch.Size([613, 512])
p x o at the end of transformer block: torch.Size([613, 3]) torch.Size([613, 512]) torch.Size([4])
x after transformer 2 : torch.Size([2454, 256])
p x o at the end of transformer block: torch.Size([2454, 3]) torch.Size([2454, 256]) torch.Size([4])
x after transformer 2 : torch.Size([9819, 128])
p x o at the end of transformer block: torch.Size([9819, 3]) torch.Size([9819, 128]) torch.Size([4])
x after transformer 2 : torch.Size([39283, 64])
p x o at the end of transformer block: torch.Size([39283, 3]) torch.Size([39283, 64]) torch.Size([4])
x after transformer 2 : torch.Size([157141, 32])
p x o at the end of transformer block: torch.Size([157141, 3]) torch.Size([157141, 32]) torch.Size([4])
x after transformer 2 : torch.Size([137003, 32])
p x o at the end of transformer block: torch.Size([137003, 3]) [2022-07-05 10:47:25,611 INFO train.py line 299 48403] Epoch: [1/100][4/1530] Data 0.001 (2.082) Batch 0.670 (3.231) Remain 137:19:54 Loss 1.8572 Accuracy 0.4024.
[2022-07-05 10:47:26,980 INFO train.py line 299 48403] Epoch: [1/100][5/1530] Data 0.001 (1.666) Batch 1.370 (2.859) Remain 121:30:24 Loss 1.8685 Accuracy 0.4434.
[2022-07-05 10:47:28,101 INFO train.py line 299 48403] Epoch: [1/100][6/1530] Data 0.001 (1.388) Batch 1.121 (2.569) Remain 109:11:41 Loss 1.5788 Accuracy 0.5394.
torch.Size([137003, 32]) torch.Size([4])
x after transformer 2 : torch.Size([34249, 64])
p x o at the end of transformer block: torch.Size([34249, 3]) torch.Size([34249, 64]) torch.Size([4])
x after transformer 2 : torch.Size([34249, 64])
p x o at the end of transformer block: torch.Size([34249, 3]) torch.Size([34249, 64]) torch.Size([4])
x after transformer 2 : torch.Size([8561, 128])
p x o at the end of transformer block: torch.Size([8561, 3]) torch.Size([8561, 128]) torch.Size([4])
x after transformer 2 : torch.Size([8561, 128])
p x o at the end of transformer block: torch.Size([8561, 3]) torch.Size([8561, 128]) torch.Size([4])
x after transformer 2 : torch.Size([8561, 128])
p x o at the end of transformer block: torch.Size([8561, 3]) torch.Size([8561, 128]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([533, 512])
p x o at the end of transformer block: torch.Size([533, 3]) torch.Size([533, 512]) torch.Size([4])
x after transformer 2 : torch.Size([533, 512])
p x o at the end of transformer block: torch.Size([533, 3]) torch.Size([533, 512]) torch.Size([4])
x after transformer 2 : torch.Size([533, 512])
p x o at the end of transformer block: torch.Size([533, 3]) torch.Size([533, 512]) torch.Size([4])
x after transformer 2 : torch.Size([2138, 256])
p x o at the end of transformer block: torch.Size([2138, 3]) torch.Size([2138, 256]) torch.Size([4])
x after transformer 2 : torch.Size([8561, 128])
p x o at the end of transformer block: torch.Size([8561, 3]) torch.Size([8561, 128]) torch.Size([4])
x after transformer 2 : torch.Size([34249, 64])
p x o at the end of transformer block: torch.Size([34249, 3]) torch.Size([34249, 64]) torch.Size([4])
x after transformer 2 : torch.Size([137003, 32])
p x o at the end of transformer block: torch.Size([137003, 3]) torch.Size([137003, 32]) torch.Size([4])
x after transformer 2 : torch.Size([275419, 32])
p x o at the end of transformer block: torch.Size([275419, 3]) torch.Size([275419, 32]) torch.Size([4])
x after transformer 2 : torch.Size([68853, 64])
p x o at the end of transformer block: torch.Size([68853, 3]) torch.Size([68853, 64]) torch.Size([4])
x after transformer 2 : torch.Size([68853, 64])
p x o at the end of transformer block: torch.Size([68853, 3]) torch.Size([68853, 64]) torch.Size([4])
x after transformer 2 : torch.Size([17212, 128])
p x o at the end of transformer block: torch.Size([17212, 3]) torch.Size([17212, 128]) torch.Size([4])
x after transformer 2 : torch.Size([17212, 128])
p x o at the end of transformer block: torch.Size([17212, 3]) torch.Size([17212, 128]) torch.Size([4])
x after transformer 2 : torch.Size([17212, 128])
p x o at the end of transformer block: torch.Size([17212, 3]) torch.Size([17212, 128]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([1074, 512])
p x o at the end of transformer block: torch.Size([1074, 3]) torch.Size([1074, 512]) torch.Size([4])
x after transformer 2 : torch.Size([1074, 512])
p x o at the end of transformer block: torch.Size([1074, 3]) torch.Size([1074, 512]) torch.Size([4])
x after transformer 2 : torch.Size([1074, 512])
p x o at the end of transformer block: torch.Size([1074, 3]) torch.Size([1074, 512]) torch.Size([4])
x after transformer 2 : torch.Size([4302, 256])
p x o at the end of transformer block: torch.Size([4302, 3]) torch.Size([4302, 256]) torch.Size([4])
x after transformer 2 : torch.Size([17212, 128])
p x o at the end of transformer block: torch.Size([17212, 3]) torch.Size([17212, 128]) torch.Size([4])
x after transformer 2 : torch.Size([68853, 64])
p x o at the end of transformer block: torch.Size([68853, 3]) torch.Size([68853, 64]) torch.Size([4])
x after transformer 2 : torch.Size([275419, 32])
p x o at the end of transformer block: torch.Size([275419, 3]) torch.Size([275419, 32]) torch.Size([4])
x after transformer 2 : torch.Size([193255, 32])
p x o at the end of transformer block: torch.Size([193255, 3]) torch.Size([193255, 32]) torch.Size([4])
x after transformer 2 : torch.Size([48313, 64])
p x o at the end of transformer block: torch.Size([48313, 3]) torch.Size([48313, 64]) torch.Size([4])
x after transformer 2 : torch.Size([48313, 64])
p x o at the end of transformer block: torch.Size([48313, 3]) torch.Size([48313, 64]) torch.Size([4])
x after transformer 2 : torch.Size([12078, 128])
p x o at the end of transformer block: torch.Size([12078, 3]) torch.Size([12078, 128]) torch.Size([4])
x after transformer 2 : torch.Size([12078, 128])
p x o at the end of transformer block: torch.Size([12078, 3]) torch.Size([12078, 128]) torch.Size([4])
x after transformer 2 : torch.Size([12078, 128])
p x o at the end of transformer block: torch.Size([12078, 3]) torch.Size([12078, 128]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([753, 512])
p x o at the end of transformer block: torch.Size([753, 3]) torch.Size([753, 512]) torch.Size([4])
x after transformer 2 : torch.Size([753, 512])
p x o at the end of transformer block: torch.Size([753, 3]) torch.Size([753, 512]) torch.Size([4])
x after transformer 2 : torch.Size([753, 512])
p x o at the end of transformer block: torch.Size([753, 3]) torch.Size([753, 512]) torch.Size([4])
x after transformer 2 : torch.Size([3018, 256])
p x o at the end of transformer block: torch.Size([3018, 3]) torch.Size([3018, 256]) torch.Size([4])
x after transformer 2 : torch.Size([12078, 128])
p x o at the end of transformer block: torch.Size([12078, 3]) torch.Size([12078, 128]) torch.Size([4])
x after transformer 2 : torch.Size([48313, 64])
p x o at the end of transformer block: torch.Size([48313, 3]) torch.Size([48313, 64]) torch.Size([4])
x after transformer 2 : torch.Size([193255, 32])
p x o at the end of transformer block: torch.Size([193255, 3]) torch.Size([193255, 32]) torch.Size([4])
x after transformer 2 : torch.Size([115609, 32])
p x o at the end of transformer block: torch.Size([115609, 3]) torch.Size([115609, 32]) torch.Size([4])
x after transformer 2 : torch.Size([28900, 64])
